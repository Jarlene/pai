apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  template:
    metadata:
      labels:
        task: monitoring
        k8s-app: grafana
    spec:
      hostNetwork: true
      hostPID: true
      nodeSelector:
        prom: prom
      containers:
      - name: grafana
        image: grafana/grafana:4.6.2
        ports:
        - containerPort: {{ clusterinfo['prometheusinfo']['grafana_port'] }}
          protocol: TCP
        env:
        - name: GF_SERVER_HTTP_PORT
          value: "{{ clusterinfo['prometheusinfo']['grafana_port'] }}"
          # The following env variables are required to make Grafana accessible via
          # the kubernetes api-server proxy. On production clusters, we recommend
          # removing these env variables, setup auth for grafana, and expose the grafana
          # service using a LoadBalancer or a public IP.
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: Admin
        - name: GF_SERVER_ROOT_URL
          # If you're only using the API Server proxy, set this value instead:
          # value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/
          value: /
        - name: GF_DASHBOARDS_JSON_ENABLED
          value: "true"
        - name: GF_DASHBOARDS_JSON_PATH
          value: /var/lib/grafana/dashboards/
        - name: GF_INSTALL_PLUGINS
          value: grafana-simple-json-datasource
        volumeMounts:
          - mountPath: /usr/share/grafana/public/dashboards
            name: config-volume
      volumes:
         - name: config-volume
           configMap:
             name: grafana-import-dashboards
         - name: grafana-persistent-storage
           emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)
    # If you are NOT using this as an addon, you should comment out this line.
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: grafana
  name: grafana
spec:
  # In a production setup, we recommend accessing Grafana through an external Loadbalancer
  # or through a public IP.
  # type: LoadBalancer
  # You could also use NodePort to expose the service at a randomly-generated port
  # type: NodePort
  ports:
  - port: 80
    targetPort: {{ clusterinfo['prometheusinfo']['grafana_port'] }}
  selector:
    k8s-app: grafana
