# Copyright (c) Microsoft Corporation
# All rights reserved.
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana-cmd
spec:
  replicas: 1
  template:
    metadata:
      labels:
        task: monitoring
        k8s-app: grafana
    spec:
      hostNetwork: true
      hostPID: true
      nodeSelector:
        prom: prom
      containers:
      - name: grafana-import-dashboards
        image: docker
        command: ["/bin/sh", "-c"]
        workingDir: /opt/grafana-import-dashboards
        args:
          # FIXME use kubernetes probe instead of "until curl"
          - >
            apk --update add curl ;
            until $(curl --silent --fail --show-error --output /dev/null {{ clusterinfo['prometheusinfo']['grafana_addr'] }}/api/datasources); do
              printf '.' ; sleep 1 ;
            done ;
            for file in *-datasource.json ; do
              if [ -e "$file" ] ; then
                echo "importing $file" &&
                curl --silent --fail --show-error \
                  --request POST {{ clusterinfo['prometheusinfo']['grafana_addr'] }}/api/datasources \
                  --header "Content-Type: application/json" \
                  --data-binary "@$file" ;
                echo "" ;
              fi
            done ;
            for file in *-dashboard.json ; do
              if [ -e "$file" ] ; then
                # wrap exported Grafana dashboard into valid json
                echo "importing $file" &&
                curl -k -u admin:admin --show-error \
                  --request POST {{ clusterinfo['prometheusinfo']['grafana_addr'] }}/api/dashboards/import \
                  --header "Accept: application/json" \
                  --header "Content-Type: application/json" \
                  -d @$file;
              fi
            done ;
            while true; do
              sleep 1m ;
            done
        volumeMounts:
        - name: config-volume
          mountPath: /opt/grafana-import-dashboards
      volumes:
         - name: config-volume
           configMap:
             name: grafana-import-dashboards

